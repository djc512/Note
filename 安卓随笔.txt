1.安卓8.0分享到抖音的content://打不开
	StrictMode.VmPolicy.Builder.detectFileUriExposure()。顾名思义，调用这个方法就会检测FileUriExposure这件事。
	在Application的onCreate中添加一下判断
	if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) 
	{StrictMode.VmPolicy.Builder builder = new StrictMode.VmPolicy.Builder();StrictMode.setVmPolicy(builder.build());}
	
2.配置安卓studio环境
	1.现在jdk，jdk12没有jre,可以不下载，只需要配置jdk的环境变量即可
	2.下载git，直接安装即可，会自动配置环境变量（D:\Android\Git\cmd），然后配置用户名与邮箱，直接按照网上有教程即可，然后就可以直接使用
	3.如果已经通过githubDesktop提前建好仓库了，只需要执行git命令即可，提交使用get push 这一点与公司使用的命令不一样，不需要带仓库路径
	4.常用命令：git status		git add .		git commit -m "注释"		git push 

3.Ubuntu进入超级管理员
	
	vm虚拟机配网
		1.打开本地的网络适配器，选择共享到v8
		2.后续参考https://www.cnblogs.com/robohou/p/7220813.html这个网址即可
	
	1.sudo passwd root
	2.设置密码
	3.su 然后输入设置的密码
	
	chmod 777 * -R 进入文件夹获取所有文件的权限
	rm -r 文件或者文件夹    删除文件或者文件夹
	chmod 777 -R 文件名     获取文件权限

	sudo apt-get install tofrodos  安装文本格式的转换（运行脚本报错\r\n这种错误）
	todos Hello.txt (即unix2dos Hello.txt) 
	fromdos Hello.txt (即dos2unix Hello.txt)
	
	
	1.安装yum
		apt-get install yum
	2.安装yasm
		apt-get install yasm
	3.安装gcc
		apt-get install gcc 
	
	配置ndk环境变量
		1.sudo gedit ~/.bashrc
		在最后一行添加
		export ANDROID_NDK=/opt/adt_bundle_linux/ndk/（自己的路径）
		export PATH=$ANDROID_NDK:$PATH
		2.source ~/.bashrc	保存配置
		3.ndk-build -v 查看是否配置成功
	
	使用源码2.8.15
	编译ffmpeg 为了防止权限问题，先获取超级管理员权限，再此权限下编译（有时候仍会报没有权限的问题，需要单独申请权限）
		1.先修改configure文件为安卓可用
		2.注意替换ndk为自己的路径
		3.修改config.sh 需要编译的功能,没有权限的文件 chmod +x xxx获取权限
		4.在根目录下，直接使用脚本命令./build_ffmpeg.sh armeabi(x86 armeabi-v7a)即可
		5.如果需要将多个文件合并成一个./build_ffmpeg_merge.sh，只能使用动态库，然后修改config.sh合并脚本的最后一个脚本libffmpeg.a或者libffmpeg.so即可获取静态或者动态合并库
		6.build_ffmpeg_svn.sh与build_ffmpeg_merge_FFmpeg4Android.sh没什么用，编译仅供参考
		
		
		在编译arm64-va8时，将--arch=$AOSP_ABI改为--arch=aarch64否则编译失败，其他的架构不需要改
		NDK一般使用ndk10b
		修改过NDK路径没有起作用，重新执行./configure文件
		C compiler test failed.这种错误优先排查./configure里的配置是否正确
	
	x264编译
		1.先修改ndk路径
		2.直接使用svn库里提供的脚本，运行对应的脚本即可，不需要参考FFmpeg4Android里的脚本
		3.使用命令./build_x264_arm64.sh  即可
		
	openssl编译
		1 执行Configure --openssldir=release no-asm no-shared android，生成Makefile
		2 编辑修改Makefile文件，修改PLATFORM=android，修改CC、AR和RANLIB定义为对应的NDK文件路径,或者拷贝本文档当前目录下的openssl_android中的对应的Makefile并调整文件名
		3 执行make，成功后当前目录下的include目录下包含后续使用的openssl头文件目录，当前目录下有相关的库文件libssl.a及libcrypto.a
		4 各个平台配置参数:
			armeabi, Configure --openssldir=release no-asm no-shared android
			armv7a, Configure --openssldir=release no-shared android-armv7
			armv64, Configure --openssldir=release no-asm no-shared linux-aarch64
			x86, Configure --openssldir=release no-asm no-shared android-x86
			x86_64, Configure --openssldir=release no-asm no-shared linux-x86_64
			mips, Configure --openssldir=release no-asm no-shared android-mips
			mips64, Configure --openssldir=release no-asm no-shared linux64-mips64
			
	编译libyuv.a
		1.使用FREYA进行编译
		2.然后替换SDK yuv里的头文件
	
	Android.mk 文件中的TARGET_ARCH_ABI 对应的是Application.mk里的APP_ABI
	适配64位时，代码里的32位&操作(0x0FFFFFFFF)都需要改成0x0FFFFFFFFFFFFFFFF  在强转的时候原来32位，在64位系统时会造成精度流失 如：long在32位系统是32位，64位系统就是64位
	
4.vivo手机在使用As安装失败
	在gradle.properties文件中添加android.injected.testOnly = false

5.观看端集成SDK
	1.虽然使用ffmpeg.so  rtmp.so这些库但是要放到libs文件夹里面
	2.rtmp.so 还需要使用System.loadlib进行依赖添加，ffmpeg.so就不需要添加了
	3.SDK层不添加rtmp.so的依赖
	4.观看端使用前需要先删除原来的build文件夹，然后再进行clean
	5.播放视频崩溃，回声消除，需要引入头文件jni_util.h文件
	
6.H265编码
	
static x265_param *pParam = NULL;
static x265_encoder *pHandle = NULL;
static x265_picture *pPic_in = NULL;

char *i420UBuf = NULL;
char *i420VBuf = NULL;

static int64_t oldTs = 0;
static int64_t encoderTs = 0;

int x265_encoder(_HX264ENC hHandle,unsigned char ucNeedIFrame, unsigned char *pucInFrame, unsigned char *pucNalBuf[], unsigned int uiNalLen[], unsigned int *puiNalNum, unsigned char *pucFrameType)
{
    int i;
    int j;
    int y_size;
    int buff_size;
    int result = 0;
    uint32_t iNal = 0;
    int frame_num = 0;
    int csp = X265_CSP_I420;
    int width = 640, height = 480;
    x265_nal *pNals;
    if(NULL == pParam){
        pParam = x265_param_alloc();
        x265_param_default_preset(pParam, "ultrafast", "zerolatency");
        printf("pParam  init");
        pParam->bRepeatHeaders = 1;//write sps,pps before keyframe
        pParam->internalCsp = csp;
        pParam->sourceWidth = width;
        pParam->sourceHeight = height;
        pParam->internalBitDepth = 8;
        pParam->fpsNum = 15;
        pParam->fpsDenom = 1;

        pParam->frameNumThreads = 0;
        pParam->bframes = 0;
        pParam->interlaceMode = 0;
        pParam->rc.rateControlMode = X265_RC_ABR;
        pParam->bEnableFastIntra = 1;
        pParam->rc.bitrate = 512;
        pParam->keyframeMax = 30;
        pParam->rdLevel = 5;

        pHandle = x265_encoder_open(pParam);
        printf("pHandle  init");
        if (pHandle == NULL) {
            return -1;
        }
    }

    if(NULL == pPic_in){
        pPic_in = x265_picture_alloc();
        x265_picture_init(pParam, pPic_in);
        pPic_in->sliceType = X265_TYPE_IDR;
        printf("pPic_in  init");
    }else{
    	 pPic_in->sliceType = X265_TYPE_AUTO;
    }

    y_size = pParam->sourceWidth * pParam->sourceHeight;
    i420UBuf = (char *) malloc(y_size / 4);
    i420VBuf = (char *) malloc(y_size / 4);

    for (i = 0; i< y_size/2;i++) {
        if(i%2 == 0){
            memcpy(i420VBuf+i/2, pucInFrame + y_size + i, 1);
        } else {
            memcpy(i420UBuf+i/2, pucInFrame + y_size + i, 1);
        }
    }

//    memcpy(buff, pucInFrame, y_szie);
//    memcpy(i420UBuf, pucInFrame + y_size, y_szie/4);
//    memcpy(i420VBuf, pucInFrame + y_size*5 / 4, y_szie/4);

    pPic_in->planes[0] = pucInFrame;
    pPic_in->planes[1] = i420UBuf;
    pPic_in->planes[2] = i420VBuf;
    pPic_in->stride[0] = width;
    pPic_in->stride[1] = width / 2;
    pPic_in->stride[2] = width / 2;

    result = x265_encoder_encode(pHandle, &pNals, &iNal, pPic_in, NULL);

    printf("result[%d]",result);
    if(puiNalNum){
       *puiNalNum = iNal;
    }

    for (j = 0; j < iNal; j++) {
        pucNalBuf[j] = pNals[j].payload;
        uiNalLen[j] = pNals[j].sizeBytes;
        printf("111pucNalBuf[%s]",pucNalBuf[j]);
        printf("111aaauiNalLen[%d]",uiNalLen[j]);
        if(uiNalLen[j] >= 5){
        	int index_tag = 0;
        	if(pucNalBuf[j][2] == 1){
        		index_tag = 4;
        		char * iBuf = (char *) malloc(uiNalLen[j]+1);
        		memcpy(iBuf+1, pucNalBuf[j], uiNalLen[j]);
        		memset(iBuf,0,1);
        		pucNalBuf[j] = iBuf;
        		uiNalLen[j] = uiNalLen[j] + 1;
        	}else{
        		index_tag = 4;
        	}
			if(((pucNalBuf[j][index_tag] & 0x7e)/2 == 19 || (pucNalBuf[j][index_tag] & 0x7e)/2 == 20 || (pucNalBuf[j][index_tag] & 0x7e)/2 == 21)){
				if(pucFrameType){
				   printf("444pucFrameType == 1");
				   pucFrameType[0] = 1;
				}
			}
        }
    }
    free(i420UBuf);
    free(i420VBuf);
    return result;
}

7.编译64位SDK指针返回截短问题
	SDK的指针为0x79db49a540但是返回到jni层就变成了0xFFFFFFFFdb49a540 指针前32位被重置了
	查看这个链接https://blog.csdn.net/hiccupzhu/article/details/21326923
	原因：在头文件中没有声明这个函数，只是在C文件中实现了，编译器生成了默认声明，并默认返回值为 integer。在32位时默认的是int是32位正常的，编译64位使用的是longlong就会出问题
	解决方法：在这个函数调用的jni头文件再次声明。例如：GsStreamingPad* gs_encoder_create_streaming_pad(Encoder* enc);（主要是函数的头文件没有导进来）
	解决思路：
	1.先检查函数头文件是否导入
	2.打印log查看数值
	
8.XML布局中，textview的text属性，仅在预览提示，不进行编译
	tools:text属性
	
9.GridView或者ListView嵌套显示不全问题
	public class MyGridView extends GridView{
      public MyGridView(Context context, AttributeSet attrs) { 
            super(context, attrs); 
        } 

        public MyGridView(Context context) { 
            super(context); 
        } 

        public MyGridView(Context context, AttributeSet attrs, int defStyle) { 
            super(context, attrs, defStyle); 
        } 

        @Override 
        public void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { 

            int expandSpec = MeasureSpec.makeMeasureSpec(Integer.MAX_VALUE >> 2, 
                    MeasureSpec.AT_MOST); 
            super.onMeasure(widthMeasureSpec, expandSpec); 
        } 
	}
	
10.画折线图，热力图
	echarts  官网：https://echarts.baidu.com/

11.将一个集合的数据分成3个一组
	   int toIndex=3;
        for (int i = 0; i < list.size(); i+=3) {
            DataBeanNew dataBeanNew = new DataBeanNew();
            if(i+3 > list.size()){        //作用为toIndex最后没有100条数据则剩余几条newList中就装几条
                toIndex = list.size() - i;
            }
            List newList = list.subList(i,i+toIndex);
            dataBeanNew.setList(newList);
            dataBeanNewList.add(dataBeanNew);
        }
12.List集合使用subList以后导致的问题
	使用subList以后，如果对集合进行增删操作会导致并发修改异常。原理参考：https://www.cnblogs.com/xjk123/p/9700285.html
	ArrayList<String> dataList = new ArrayList<>();
	ArrayList<String> list = new ArrayList<>(dataList);
	这两个集合里面的数据完全一样，但是所指的地址确不相同，可以作为避免并发修改异常的一种方式	
	
13.List集合一遍遍历一遍删除
	1.使用迭代器进行操作
	2.倒序遍历，操作
	参考网址：https://blog.csdn.net/zcyzsy/article/details/82790381
	
14.只处理当页面在栈顶的逻辑
	例如：广播的注册，不需要一直存在，当页面处于栈顶（onResume）注册，失去栈顶（onPause）解除注册
	打开一个页面，则这个页面就处于栈顶，覆盖这个页面则移除栈顶，所以只需要在onResume与onPause这两个方法中处理即可
	关闭所有的页面：
		1.定义一个页面收集类，在里面实现add,remove,finish所有页面的方法
		2.定义BaseActivtyl类，添加到页面收集类里面，同时onDestory实现remove方法
		3.所有BaseActivity的子类都默认添加到这个收集类集合中了。只需要调用finish方法即可关闭所有的页面
		
15.静态广播没发显示对话框，对话框的展示需要挂在在当前页面下，静态广播接收器只是一个单独的实体类，因此没法展示，动态广播是在当前activity下注册的，所以可以展示对话框

16.ListView嵌套GridView
	1.listView嵌套GridView处理数据源只需要listView刷新适配器，既可以同时刷新GriView的数据
	2.加载更多数据时，将请求的数据，添加到数据源里面，刷新listView的适配器即可以同步刷新GridView的数据
	
	使用RecycleView可以通过holder.ietmView获取整个条目（itemView为RecycleView.ViewHolder提供的变量）
	
	GridView最好屏蔽滑动事件，否则在加载更多数据时，会出现滑动冲突
	
17.安卓studio编译失败报错如下：

	Error:Failed to resolve: appcompat-v7
	Open File
	Error:Failed to resolve: animated-vector-drawable
	Open File
	Error:Failed to resolve: support-vector-drawable
	Open File
	Error:Failed to resolve: support-v4
	Open File
	Error:Failed to resolve: support-media-compat
	Open File
	Error:Failed to resolve: support-fragment
	Open File
	Error:Failed to resolve: support-core-utils
	Open File
	Error:Failed to resolve: support-core-ui
	Open File
	Error:Failed to resolve: support-compat
	Open File
	Error:Failed to resolve: support-annotations
	Open File
	Error:Failed to resolve: runtime
	Open File
	Error:Failed to resolve: common
	Open File
	
	解决方法：将项目的build.gradle文件下allprojects的google()移到首位，重新编译项目即可
	
18. <uses-sdk tools:overrideLibrary="com.huawei.android.hms.agent.push"/>写在清单文件<manifest>中

19.TabLayout 标题栏使用注意事项
	必须使用 android.support.design.widget.TabLayout这个库的TabLayout
	
20.Lottie使用注意事项
	如果动画涉及到图片，必须将图片也放到assert文件里面，否则报错
	
21.radioGroup使用注意事项
	radioGroup 如果使用除radioButton以外的控件，点击事件不起作用
	
22.ViewPager嵌套GridView与小圆点指示器联动

	1.自定义View对象，通过inflate填充gridview组件
	View view = LayoutInflater.from(this).inflate(R.layout.gv_item, null);
	GridView gridView = view.findViewById(R.id.gv);
	gridView.setAdapter(new MyItemAdapter(this, itemList));
	gridView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
		@Override
		public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
			Toast.makeText(MainActivity.this, "position: " + itemList2.get(position), Toast.LENGTH_SHORT).show();
		}
	});
    list.add(view);
	
	2.小圆点指示器与ViewPager联动，添加到控件里的LinearLayout容器里面
	ImageView iv_circle = new ImageView(this);
	iv_circle.setImageResource(R.drawable.circle);
	ll_container.addView(iv_circle);
	LinearLayout.LayoutParams params = (LinearLayout.LayoutParams) iv_circle.getLayoutParams();
	params3.leftMargin = 96;
	params3.rightMargin = 96;
	iv_circle.setOnClickListener(new View.OnClickListener() {
		@Override
		public void onClick(View v) {
			iv_circle1.setSelected(false);
			iv_circle2.setSelected(false);
			iv_circle3.setSelected(true);
			vp.setCurrentItem(2);
		}
	});
	iv_circle.setLayoutParams(params3);
	circleList.add(iv_circle);
	
	3.ViewPager与小圆点联动
	在ViewPager的滑动监听中，根据当前页面遍历小圆点集合，判断设置小圆点状态