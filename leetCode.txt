好的算法是最大可能的减少时间复杂度与空间复杂度
时间复杂度：算法所用的时间
空间复杂度：每一次计算所占用的临时内存空间
1.给定一个整形数组，给定一个值，在数组中两个数，使他们的和等于给定的值，出去对应的角标，存到集合中
public class Demo1 {
    private int[] arr = {1,4,8,0,2,3,7};
    private int value = 7;
    private int[] result = new int[2];
	//main-demo1Result: [1, 5]
    public int[] getResult(){
        HashMap<Integer,Integer> map = new HashMap<>();//用来存放数组的元素与角标
        for (int i = 0; i < arr.length; i++) {
            int index_value = arr[i];
            int index_result = value - index_value;
            if (map.containsKey(index_result)) {
                result[0] = map.get(index_result);
                result[1] = i;
                break;
            }else {
                map.put(index_value,i);
            }
        }
        return result;
    }
}
	思路：1.遍历数组，取出元素，判断指定数值减去元素值的差值是否存在map里，如果存在说明已经找到，取出map中当前值对应的角标，不存在将当前值作为key，index作为value存到集合中
		  2.好处是数组只需要遍历了一次，也不需要重复去取数值，即可完成查找
		 
		 
2.public class Demo2 {
    private int[] nums = {0, 1, 3, 50, 78,99};
    private int lower = 0;
    private int upper = 99;
    private List<String> list = new ArrayList<>();

    public List<String> getList() {
        addToList(lower, nums[0] - 1);//先取出最小值，与数组的第一个元素
        int pre = nums[0];//取出数组的第一个元素,当作起始值
        int i = 1;
        while (i < nums.length) {//遍历
            int curr = nums[i];
            if (pre != curr - 1) {//说明中间有数据，如果两个数之差不等于1，说明中间有元素
                addToList(pre + 1, curr - 1);//将起始值加1，结束之减1，表示他们的中间值
            }
            pre = curr;//重新赋值起始值
            i++;
        }
        addToList(nums[nums.length - 1] + 1, upper-1);
        return list;
    }
    //输出结果  main-demo2Result: [2, 4->49, 51->77, 79->98]
    private void addToList(int start, int end) {//再次判断起始值与结束值
        if (start == end) {
            list.add(String.valueOf(start));
        } else if (start < end) {
            list.add(start + "->" + end);
        }
    }

    /**
     * 1.先分析结果，发现是数组里面两个元素的中间数值，即起始值+1，结束值-1这个范围
     * 2.遍历数组，如果两个临近的两个元素之差不等于1，说明符合要求
     * 3.将符合要求的数据再次判断是否相等，按照不同的格式存放到集合里面
     */
}

3.public class Demo3 {
    private int[] arr = {1,3,6,5,7,9};
    private int[] doubleArr = new int[arr.length*2];
    private List<Integer> list = new ArrayList<>();

    //[3, 6, 7, 7, 9]
    public List<Integer> getNewArray() {
        System.arraycopy(arr, 0, doubleArr, 0, arr.length);
        System.arraycopy(arr, 0, doubleArr, arr.length, arr.length);

        for (int i = 0; i < arr.length; i++) {
            for (int j = i + 1; j < doubleArr.length; j++) {
                if (arr[i] < doubleArr[j]) {
                    list.add(doubleArr[j]);
                    break;
                }
            }
        }
        return list;
    }
    /**
     * 输出数组中下一个大于大于当前元素的值
     * 1.创建一个当前集合长度2倍长度的数组double
     * 2.遍历当前集合 single
     * 3.比较double当前与下一个的大小
     * 4.只需取出下一个大于当前角标对应值的元素
     *
     * 只需要比较当前元素与下一个元素，然后取出第一个大于当前元素的值即可
     */
}

1.给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。
private int[] arr = {1, 4, 2, 1, 2};
public int getNum() {
	int result = 0;
	for (int i = 0; i < arr.length; i++)
		result ^= arr[i];
	return result;
}
1.使用异或的操作进行处理

异或操作：
	1.转换成二进制，相同为0不同为1  如：001^100 = 111;
	2.交换律	如：a^b^c = a^c^b = c^b^a 
	3.结合律	如：a^(b^c) = (a^b)^c
	4.对于任何数都有	a^a = 0	  a^0 = a
	5.自反性	a^b^b = a^0 = a;  注：不分前后，同级运算a^b^b 可以先运行b^b然后结果再与a^运算

2.给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。
不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。

class Solution {
    public int removeDuplicates(int[] nums) {
        int num = 0;
        for (int i = 0; i < nums.length; i++) {
            
            if (nums[num] != nums[i]) {
                num++;
                nums[num] = nums[i];
            }
        }
        return num + 1;
    }
}

1.判断当前与下一位是否一样，如果不一样就替换成下一个
2.数组只需替换当前下标对应的值


3.给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。
设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。
注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

int[] prices = {7,1,5,3,6,4};
public int maxProfit() {
	int max = 0;
	int size = prices.length;
	for (int i = 0; i < size - 1; ++i)
		if (prices[i] < prices[i + 1])
			max += prices[i + 1] - prices[i];
	return max;
}

1.将数据画在表上最直观，可以看出来要想利益最大，最好的办法就是只要有收益就卖出
2.只需处理下当一个元素大于前一个元素的差，然后相加即可

